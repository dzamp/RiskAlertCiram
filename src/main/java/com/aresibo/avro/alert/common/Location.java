/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.aresibo.avro.alert.common;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Location extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5505134173858303274L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Location\",\"namespace\":\"com.aresibo.avro.alert.common\",\"fields\":[{\"name\":\"type\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"Point\"},{\"name\":\"coordinates\",\"type\":[{\"type\":\"array\",\"items\":[{\"type\":\"record\",\"name\":\"Point\",\"fields\":[{\"name\":\"latitude\",\"type\":\"double\",\"default\":0.0},{\"name\":\"longitude\",\"type\":\"double\",\"default\":0.0}]},\"null\"]},\"null\"]},{\"name\":\"radius\",\"type\":\"float\",\"default\":0.0}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Location> ENCODER =
      new BinaryMessageEncoder<Location>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Location> DECODER =
      new BinaryMessageDecoder<Location>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Location> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Location> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Location> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Location>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Location to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Location from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Location instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Location fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   public java.lang.String type;
   public java.util.List<com.aresibo.avro.alert.common.Point> coordinates;
   public float radius;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Location() {}

  /**
   * All-args constructor.
   * @param type The new value for type
   * @param coordinates The new value for coordinates
   * @param radius The new value for radius
   */
  public Location(java.lang.String type, java.util.List<com.aresibo.avro.alert.common.Point> coordinates, java.lang.Float radius) {
    this.type = type;
    this.coordinates = coordinates;
    this.radius = radius;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return type;
    case 1: return coordinates;
    case 2: return radius;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: type = value$ != null ? value$.toString() : null; break;
    case 1: coordinates = (java.util.List<com.aresibo.avro.alert.common.Point>)value$; break;
    case 2: radius = (java.lang.Float)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'type' field.
   * @return The value of the 'type' field.
   */
  public java.lang.String getType() {
    return type;
  }


  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(java.lang.String value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'coordinates' field.
   * @return The value of the 'coordinates' field.
   */
  public java.util.List<com.aresibo.avro.alert.common.Point> getCoordinates() {
    return coordinates;
  }


  /**
   * Sets the value of the 'coordinates' field.
   * @param value the value to set.
   */
  public void setCoordinates(java.util.List<com.aresibo.avro.alert.common.Point> value) {
    this.coordinates = value;
  }

  /**
   * Gets the value of the 'radius' field.
   * @return The value of the 'radius' field.
   */
  public float getRadius() {
    return radius;
  }


  /**
   * Sets the value of the 'radius' field.
   * @param value the value to set.
   */
  public void setRadius(float value) {
    this.radius = value;
  }

  /**
   * Creates a new Location RecordBuilder.
   * @return A new Location RecordBuilder
   */
  public static com.aresibo.avro.alert.common.Location.Builder newBuilder() {
    return new com.aresibo.avro.alert.common.Location.Builder();
  }

  /**
   * Creates a new Location RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Location RecordBuilder
   */
  public static com.aresibo.avro.alert.common.Location.Builder newBuilder(com.aresibo.avro.alert.common.Location.Builder other) {
    if (other == null) {
      return new com.aresibo.avro.alert.common.Location.Builder();
    } else {
      return new com.aresibo.avro.alert.common.Location.Builder(other);
    }
  }

  /**
   * Creates a new Location RecordBuilder by copying an existing Location instance.
   * @param other The existing instance to copy.
   * @return A new Location RecordBuilder
   */
  public static com.aresibo.avro.alert.common.Location.Builder newBuilder(com.aresibo.avro.alert.common.Location other) {
    if (other == null) {
      return new com.aresibo.avro.alert.common.Location.Builder();
    } else {
      return new com.aresibo.avro.alert.common.Location.Builder(other);
    }
  }

  /**
   * RecordBuilder for Location instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Location>
    implements org.apache.avro.data.RecordBuilder<Location> {

    private java.lang.String type;
    private java.util.List<com.aresibo.avro.alert.common.Point> coordinates;
    private float radius;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.aresibo.avro.alert.common.Location.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.type)) {
        this.type = data().deepCopy(fields()[0].schema(), other.type);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.coordinates)) {
        this.coordinates = data().deepCopy(fields()[1].schema(), other.coordinates);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.radius)) {
        this.radius = data().deepCopy(fields()[2].schema(), other.radius);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing Location instance
     * @param other The existing instance to copy.
     */
    private Builder(com.aresibo.avro.alert.common.Location other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.type)) {
        this.type = data().deepCopy(fields()[0].schema(), other.type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.coordinates)) {
        this.coordinates = data().deepCopy(fields()[1].schema(), other.coordinates);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.radius)) {
        this.radius = data().deepCopy(fields()[2].schema(), other.radius);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'type' field.
      * @return The value.
      */
    public java.lang.String getType() {
      return type;
    }


    /**
      * Sets the value of the 'type' field.
      * @param value The value of 'type'.
      * @return This builder.
      */
    public com.aresibo.avro.alert.common.Location.Builder setType(java.lang.String value) {
      validate(fields()[0], value);
      this.type = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'type' field.
      * @return This builder.
      */
    public com.aresibo.avro.alert.common.Location.Builder clearType() {
      type = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'coordinates' field.
      * @return The value.
      */
    public java.util.List<com.aresibo.avro.alert.common.Point> getCoordinates() {
      return coordinates;
    }


    /**
      * Sets the value of the 'coordinates' field.
      * @param value The value of 'coordinates'.
      * @return This builder.
      */
    public com.aresibo.avro.alert.common.Location.Builder setCoordinates(java.util.List<com.aresibo.avro.alert.common.Point> value) {
      validate(fields()[1], value);
      this.coordinates = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'coordinates' field has been set.
      * @return True if the 'coordinates' field has been set, false otherwise.
      */
    public boolean hasCoordinates() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'coordinates' field.
      * @return This builder.
      */
    public com.aresibo.avro.alert.common.Location.Builder clearCoordinates() {
      coordinates = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'radius' field.
      * @return The value.
      */
    public float getRadius() {
      return radius;
    }


    /**
      * Sets the value of the 'radius' field.
      * @param value The value of 'radius'.
      * @return This builder.
      */
    public com.aresibo.avro.alert.common.Location.Builder setRadius(float value) {
      validate(fields()[2], value);
      this.radius = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'radius' field has been set.
      * @return True if the 'radius' field has been set, false otherwise.
      */
    public boolean hasRadius() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'radius' field.
      * @return This builder.
      */
    public com.aresibo.avro.alert.common.Location.Builder clearRadius() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Location build() {
      try {
        Location record = new Location();
        record.type = fieldSetFlags()[0] ? this.type : (java.lang.String) defaultValue(fields()[0]);
        record.coordinates = fieldSetFlags()[1] ? this.coordinates : (java.util.List<com.aresibo.avro.alert.common.Point>) defaultValue(fields()[1]);
        record.radius = fieldSetFlags()[2] ? this.radius : (java.lang.Float) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Location>
    WRITER$ = (org.apache.avro.io.DatumWriter<Location>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Location>
    READER$ = (org.apache.avro.io.DatumReader<Location>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.type);

    if (this.coordinates == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      long size0 = this.coordinates.size();
      out.writeArrayStart();
      out.setItemCount(size0);
      long actualSize0 = 0;
      for (com.aresibo.avro.alert.common.Point e0: this.coordinates) {
        actualSize0++;
        out.startItem();
        if (e0 == null) {
          out.writeIndex(1);
          out.writeNull();
        } else {
          out.writeIndex(0);
          e0.customEncode(out);
        }
      }
      out.writeArrayEnd();
      if (actualSize0 != size0)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");
    }

    out.writeFloat(this.radius);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.type = in.readString();

      if (in.readIndex() != 0) {
        in.readNull();
        this.coordinates = null;
      } else {
        long size0 = in.readArrayStart();
        java.util.List<com.aresibo.avro.alert.common.Point> a0 = this.coordinates;
        if (a0 == null) {
          a0 = new SpecificData.Array<com.aresibo.avro.alert.common.Point>((int)size0, SCHEMA$.getField("coordinates").schema().getTypes().get(0));
          this.coordinates = a0;
        } else a0.clear();
        SpecificData.Array<com.aresibo.avro.alert.common.Point> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.aresibo.avro.alert.common.Point>)a0 : null);
        for ( ; 0 < size0; size0 = in.arrayNext()) {
          for ( ; size0 != 0; size0--) {
            com.aresibo.avro.alert.common.Point e0 = (ga0 != null ? ga0.peek() : null);
            if (in.readIndex() != 0) {
              in.readNull();
              e0 = null;
            } else {
              if (e0 == null) {
                e0 = new com.aresibo.avro.alert.common.Point();
              }
              e0.customDecode(in);
            }
            a0.add(e0);
          }
        }
      }

      this.radius = in.readFloat();

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.type = in.readString();
          break;

        case 1:
          if (in.readIndex() != 0) {
            in.readNull();
            this.coordinates = null;
          } else {
            long size0 = in.readArrayStart();
            java.util.List<com.aresibo.avro.alert.common.Point> a0 = this.coordinates;
            if (a0 == null) {
              a0 = new SpecificData.Array<com.aresibo.avro.alert.common.Point>((int)size0, SCHEMA$.getField("coordinates").schema().getTypes().get(0));
              this.coordinates = a0;
            } else a0.clear();
            SpecificData.Array<com.aresibo.avro.alert.common.Point> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.aresibo.avro.alert.common.Point>)a0 : null);
            for ( ; 0 < size0; size0 = in.arrayNext()) {
              for ( ; size0 != 0; size0--) {
                com.aresibo.avro.alert.common.Point e0 = (ga0 != null ? ga0.peek() : null);
                if (in.readIndex() != 0) {
                  in.readNull();
                  e0 = null;
                } else {
                  if (e0 == null) {
                    e0 = new com.aresibo.avro.alert.common.Point();
                  }
                  e0.customDecode(in);
                }
                a0.add(e0);
              }
            }
          }
          break;

        case 2:
          this.radius = in.readFloat();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










